/-
Copyright (c) 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author(s): Shilpi Goel
-/
import Proofs.SHA512.SHA512LoopBlocks
import Proofs.SHA512.SHA512Prelude
import Proofs.SHA512.SHA512_block_armv8_rules
import Arm.Cfg.Cfg
import Tactics.SymBlock
import Tactics.ClearNamed

open BitVec

namespace SHA512

/-
set_option pp.maxSteps 1000 in
set_option maxRecDepth 8000 in
theorem spec_simp_a
  { a b c d e f g h
    i0 i1 i2 i3 i4 i5 i6 i7 i8 i9 i10 i11 i12 i13 i14 i15
    k0 k1 k2 k3 k4 k5 k6 k7 k8 k9 k10 k11 k12 k13 k14 k15
    k16 k17 k18 k19 k20 k21 k22 k23 k24 k25 k26 k27 k28
    k29 k30 k31 k32 k33 k34 k35 k36 k37 k38 k39 k40 k41
    k42 k43 k44 k45 k46 k47 k48 k49 k50 k51 k52 k53 k54
    k55 k56 k57 k58 k59 k60 k61 k62 k63 k64 k65 k66 k67
    k68 k69 k70 k71 k72 k73 k74 k75 k76 k77 k78 k79
    : BitVec 64 }
  (h_hash : (h0 : SHA2.Hash) = {a, b, c, d, e, f, g, h})
  (h_ktbl : k = [k0,  k1,  k2,  k3,  k4,  k5,  k6,  k7,  k8,  k9,  k10, k11, k12,
                 k13, k14, k15,
                 k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28,
                 k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41,
                 k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54,
                 k55, k56, k57, k58, k59, k60, k61, k62, k63, k64, k65, k66, k67,
                 k68, k69, k70, k71, k72, k73, k74, k75, k76, k77, k78, k79])
  (h_input : input = [[ i15, i14, i13, i12, i11, i10, i9, i8,
                        i7,  i6,  i5,  i4,  i3,  i2,  i1, i0 ]]) :
  (SHA2.processBlocks_alt 80 h0 k input).a =
  xxxx := by
  simp [h_hash, h_ktbl, h_input,
        SHA2.processBlocks_alt, SHA2.add_hash,
        SHA2.compression_alt, SHA2.compression_update,
        SHA2.message_schedule_word]

  sorry
-/

/-
Block Sizes:
[8,
 12, 12, 12, 12, 12, 12, 12, 12,
 12, 12, 12, 12, 12, 12, 12, 12,
 12, 12, 12, 12, 12, 12, 12, 12,
 12, 12, 12, 12, 12, 12, 12, 12,
 11, 11, 11, 11, 11, 11, 11,
 11,
 5]
-/

#time
set_option linter.unusedVariables false in
-- set_option trace.Tactic.sym.info true in
-- set_option trace.Tactic.sym true in
set_option pp.maxSteps 100 in
set_option maxHeartbeats 2000000 in
set_option maxRecDepth 8000 in
theorem sha512_loop_sym {s0 sf : ArmState}
 { a b c d e f g h
   i0 i1 i2 i3 i4 i5 i6 i7 i8 i9 i10 i11 i12 i13 i14 i15
   k0 k1 k2 k3 k4 k5 k6 k7 k8 k9 k10 k11 k12 k13 k14 k15
   k16 k17 k18 k19 k20 k21 k22 k23 k24 k25 k26 k27 k28
   k29 k30 k31 k32 k33 k34 k35 k36 k37 k38 k39 k40 k41
   k42 k43 k44 k45 k46 k47 k48 k49 k50 k51 k52 k53 k54
   k55 k56 k57 k58 k59 k60 k61 k62 k63 k64 k65 k66 k67
   k68 k69 k70 k71 k72 k73 k74 k75 k76 k77 k78 k79
   : BitVec 64 }
  (h_program : s0.program = program)
  (h_pc : r StateField.PC s0 = 0x126500#64)
  (h_err : r StateField.ERR s0 = StateError.None)
  (h_N : N = 1#64)
  (h_precondition : SHA512.prelude 0x126500#64 N SP CtxBase InputBase s0)
  (h_q0  : r (.SFP  0#5) s0 = b ++ a)
  (h_q1  : r (.SFP  1#5) s0 = d ++ c)
  (h_q2  : r (.SFP  2#5) s0 = f ++ e)
  (h_q3  : r (.SFP  3#5) s0 = h ++ g)
  (h_q16 : r (.SFP 16#5) s0 = i1 ++ i0)
  (h_q17 : r (.SFP 17#5) s0 = i3 ++ i2)
  (h_q18 : r (.SFP 18#5) s0 = i5 ++ i4)
  (h_q19 : r (.SFP 19#5) s0 = i7 ++ i6)
  (h_q20 : r (.SFP 20#5) s0 = i9 ++ i8)
  (h_q21 : r (.SFP 21#5) s0 = i11 ++ i10)
  (h_q22 : r (.SFP 22#5) s0 = i13 ++ i12)
  (h_q23 : r (.SFP 23#5) s0 = i15 ++ i14)

  (h_ktbl0  : s0[r (.GPR 3#5) s0, 16] = k1 ++ k0)
  (h_ktbl1  : s0[r (.GPR 3#5) s0 + 16#64, 16] = k3 ++ k2)
  (h_ktbl2  : s0[r (.GPR 3#5) s0 + 16#64 + 16#64,  16] = k5 ++ k4)
  (h_ktbl3  : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64,  16] = k7 ++ k6)
  (h_ktbl4  : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64,  16] = k9 ++ k8)
  (h_ktbl5  : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k11 ++ k10)
  (h_ktbl6  : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k13 ++ k12)
  (h_ktbl7  : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k15 ++ k14)
  (h_ktbl8  : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k17 ++ k16)
  (h_ktbl9  : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k19 ++ k18)
  (h_ktbl10 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k21 ++ k20)
  (h_ktbl11 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k23 ++ k22)
  (h_ktbl12 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k25 ++ k24)
  (h_ktbl13 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k27 ++ k26)
  (h_ktbl14 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k29 ++ k28)
  (h_ktbl15 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k31 ++ k30)
  (h_ktbl16 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k33 ++ k32)
  (h_ktbl17 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k35 ++ k34)
  (h_ktbl18 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k37 ++ k36)
  (h_ktbl19 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k39 ++ k38)
  (h_ktbl20 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k41 ++ k40)
  (h_ktbl21 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k43 ++ k42)
  (h_ktbl22 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k45 ++ k44)
  (h_ktbl23 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k47 ++ k46)
  (h_ktbl24 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k49 ++ k48)
  (h_ktbl25 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k51 ++ k50)
  (h_ktbl26 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k53 ++ k52)
  (h_ktbl27 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k55 ++ k54)
  (h_ktbl28 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k57 ++ k56)
  (h_ktbl29 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k59 ++ k58)
  (h_ktbl30 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k61 ++ k60)
  (h_ktbl31 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k63 ++ k62)
  (h_ktbl32 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k65 ++ k64)
  (h_ktbl33 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k67 ++ k66)
  (h_ktbl34 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k69 ++ k68)
  (h_ktbl35 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k71 ++ k70)
  (h_ktbl36 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k73 ++ k72)
  (h_ktbl37 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k75 ++ k74)
  (h_ktbl38 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k77 ++ k76)
  (h_ktbl39 : s0[r (.GPR 3#5) s0 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64 + 16#64, 16] = k79 ++ k78)

  (h_hash : (h0 : SHA2.Hash) = {a, b, c, d, e, f, g, h})
  (h_ktbl : k = [k0,  k1,  k2,  k3,  k4,  k5,  k6,  k7,  k8,  k9,  k10, k11, k12,
                 k13, k14, k15,
                 k16, k17, k18, k19, k20, k21, k22, k23, k24, k25, k26, k27, k28,
                 k29, k30, k31, k32, k33, k34, k35, k36, k37, k38, k39, k40, k41,
                 k42, k43, k44, k45, k46, k47, k48, k49, k50, k51, k52, k53, k54,
                 k55, k56, k57, k58, k59, k60, k61, k62, k63, k64, k65, k66, k67,
                 k68, k69, k70, k71, k72, k73, k74, k75, k76, k77, k78, k79])
  (h_input : input = [[ i15, i14, i13, i12, i11, i10, i9, i8,
                        i7,  i6,  i5,  i4,  i3,  i2,  i1, i0 ]])

  (h_run : sf = run 485 s0) :
  r .ERR sf = .None
  -- More generally:
  ∧ r .PC sf = (if r (StateField.GPR 0x2#5) s0 - 0x1#64 = 0x0#64 then 0x126c94#64 else 0x126500#64)
  -- KTbl Address is reset to the first address at the end of the loop.
  -- ∧ r (.GPR 3) sf = r (.GPR 3) s0
  ∧ (r (.SFP 3) sf ++ r (.SFP 2) sf ++ r (.SFP 1) sf ++ r (.SFP 0) sf) =
     SHA2.Hash.toBitVec
      (SHA2.processBlocks_alt 80 h0 k input)
  := by
  -- Symbolic Simulation
  sym_block 485 (block_sizes := [8,
                                 12, 12, 12, 12, 12, 12, 12, 12,
                                 12, 12, 12, 12, 12, 12, 12, 12,
                                 12, 12, 12, 12, 12, 12, 12, 12,
                                 12, 12, 12, 12, 12, 12, 12, 12,
                                 11, 11, 11, 11, 11, 11, 11,
                                 11,
                                 5])

  -- KTbl Address is reset to the first one at the end of the loop.
  -- (FIXME) Address Normalization isn't helping here!
  -- generalize r (StateField.GPR 0x3#5) s0 = x3
  -- change BitVec 64 at x3
  -- clear_named [h_s]
  -- repeat rw [← @BitVec.add_assoc_symm]
  -- simp (config := {ground := true}) only
  -- rw [BitVec.add_sub_cancel]
  simp [h_hash, h_ktbl, h_input, SHA2.Hash.toBitVec,
        SHA2.processBlocks_alt, SHA2.add_hash,
        SHA2.compression_alt, SHA2.compression_update,
        SHA2.message_schedule_word]
  simp [h_ktbl0,
        h_ktbl1,
        h_ktbl2,
        h_ktbl3,
        h_ktbl4,
        h_ktbl5,
        h_ktbl6,
        h_ktbl7,
        h_ktbl8,
        h_ktbl9,
        h_ktbl10,
        h_ktbl11,
        h_ktbl12,
        h_ktbl13,
        h_ktbl14,
        h_ktbl15,
        h_ktbl16,
        h_ktbl17,
        h_ktbl18,
        h_ktbl19,
        h_ktbl20,
        h_ktbl21,
        h_ktbl22,
        h_ktbl23,
        h_ktbl24,
        h_ktbl25,
        h_ktbl26,
        h_ktbl27,
        h_ktbl28,
        h_ktbl29,
        h_ktbl30,
        h_ktbl31,
        h_ktbl32,
        h_ktbl33,
        h_ktbl34,
        h_ktbl35,
        h_ktbl36,
        h_ktbl37,
        h_ktbl38,
        h_ktbl39,
        h_q0,
        h_q1,
        h_q2,
        h_q3,
        h_q16,
        h_q17,
        h_q18,
        h_q19,
        h_q20,
        h_q21,
        h_q22,
        h_q23]
  simp [extractLsb'_append_swap,
        extractLsb'_append_left_64,
        extractLsb'_append_right_64,
        extractLsb'_add_64]
  -- Make sure conclusion only depends on the variables we introduced.
  clear_named [h_, blocki]
  clear_named [s]
  clear input k h0 N SP CtxBase InputBase
  sorry
  done
